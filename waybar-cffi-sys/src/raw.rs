/* automatically generated by rust-bindgen 0.71.1 */

pub type gsize = ::std::os::raw::c_ulong;
pub type guint = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GData {
    _unused: [u8; 0],
}
pub type GData = _GData;
pub type GType = gsize;
#[doc = " GTypeClass:\n\n An opaque structure used as the base of all classes."]
pub type GTypeClass = _GTypeClass;
#[doc = " GTypeInstance:\n\n An opaque structure used as the base of all type instances."]
pub type GTypeInstance = _GTypeInstance;
#[doc = " GTypeClass:\n\n An opaque structure used as the base of all classes."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeClass {
    pub g_type: GType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GTypeClass"][::std::mem::size_of::<_GTypeClass>() - 8usize];
    ["Alignment of _GTypeClass"][::std::mem::align_of::<_GTypeClass>() - 8usize];
    ["Offset of field: _GTypeClass::g_type"][::std::mem::offset_of!(_GTypeClass, g_type) - 0usize];
};
#[doc = " GTypeInstance:\n\n An opaque structure used as the base of all type instances."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeInstance {
    pub g_class: *mut GTypeClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GTypeInstance"][::std::mem::size_of::<_GTypeInstance>() - 8usize];
    ["Alignment of _GTypeInstance"][::std::mem::align_of::<_GTypeInstance>() - 8usize];
    ["Offset of field: _GTypeInstance::g_class"]
        [::std::mem::offset_of!(_GTypeInstance, g_class) - 0usize];
};
pub type GInitiallyUnowned = _GObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObject {
    pub g_type_instance: GTypeInstance,
    pub ref_count: guint,
    pub qdata: *mut GData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GObject"][::std::mem::size_of::<_GObject>() - 24usize];
    ["Alignment of _GObject"][::std::mem::align_of::<_GObject>() - 8usize];
    ["Offset of field: _GObject::g_type_instance"]
        [::std::mem::offset_of!(_GObject, g_type_instance) - 0usize];
    ["Offset of field: _GObject::ref_count"][::std::mem::offset_of!(_GObject, ref_count) - 8usize];
    ["Offset of field: _GObject::qdata"][::std::mem::offset_of!(_GObject, qdata) - 16usize];
};
pub type GtkWidget = _GtkWidget;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GtkWidgetPrivate {
    _unused: [u8; 0],
}
pub type GtkWidgetPrivate = _GtkWidgetPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GtkWidget {
    pub parent_instance: GInitiallyUnowned,
    pub priv_: *mut GtkWidgetPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GtkWidget"][::std::mem::size_of::<_GtkWidget>() - 32usize];
    ["Alignment of _GtkWidget"][::std::mem::align_of::<_GtkWidget>() - 8usize];
    ["Offset of field: _GtkWidget::parent_instance"]
        [::std::mem::offset_of!(_GtkWidget, parent_instance) - 0usize];
    ["Offset of field: _GtkWidget::priv_"][::std::mem::offset_of!(_GtkWidget, priv_) - 24usize];
};
pub type GtkContainer = _GtkContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GtkContainerPrivate {
    _unused: [u8; 0],
}
pub type GtkContainerPrivate = _GtkContainerPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GtkContainer {
    pub widget: GtkWidget,
    pub priv_: *mut GtkContainerPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GtkContainer"][::std::mem::size_of::<_GtkContainer>() - 40usize];
    ["Alignment of _GtkContainer"][::std::mem::align_of::<_GtkContainer>() - 8usize];
    ["Offset of field: _GtkContainer::widget"]
        [::std::mem::offset_of!(_GtkContainer, widget) - 0usize];
    ["Offset of field: _GtkContainer::priv_"]
        [::std::mem::offset_of!(_GtkContainer, priv_) - 32usize];
};
unsafe extern "C" {
    #[doc = " Waybar ABI version. 2 is the latest version"]
    pub static wbcffi_version: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wbcffi_module {
    _unused: [u8; 0],
}
#[doc = " Waybar module information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wbcffi_init_info {
    #[doc = " Waybar CFFI object pointer"]
    pub obj: *mut wbcffi_module,
    #[doc = " Waybar version string"]
    pub waybar_version: *const ::std::os::raw::c_char,
    #[doc = " Returns the waybar widget allocated for this module\n @param obj Waybar CFFI object pointer"]
    pub get_root_widget:
        ::std::option::Option<unsafe extern "C" fn(obj: *mut wbcffi_module) -> *mut GtkContainer>,
    #[doc = " Queues a request for calling wbcffi_update() on the next GTK main event\n loop iteration\n @param obj Waybar CFFI object pointer"]
    pub queue_update: ::std::option::Option<unsafe extern "C" fn(arg1: *mut wbcffi_module)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wbcffi_init_info"][::std::mem::size_of::<wbcffi_init_info>() - 32usize];
    ["Alignment of wbcffi_init_info"][::std::mem::align_of::<wbcffi_init_info>() - 8usize];
    ["Offset of field: wbcffi_init_info::obj"]
        [::std::mem::offset_of!(wbcffi_init_info, obj) - 0usize];
    ["Offset of field: wbcffi_init_info::waybar_version"]
        [::std::mem::offset_of!(wbcffi_init_info, waybar_version) - 8usize];
    ["Offset of field: wbcffi_init_info::get_root_widget"]
        [::std::mem::offset_of!(wbcffi_init_info, get_root_widget) - 16usize];
    ["Offset of field: wbcffi_init_info::queue_update"]
        [::std::mem::offset_of!(wbcffi_init_info, queue_update) - 24usize];
};
#[doc = " Config key-value pair"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wbcffi_config_entry {
    #[doc = " Entry key"]
    pub key: *const ::std::os::raw::c_char,
    #[doc = " Entry value\n\n In ABI version 1, this may be either a bare string if the value is a\n string, or the JSON representation of any other JSON object as a string.\n\n From ABI version 2 onwards, this is always the JSON representation of the\n value as a string."]
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wbcffi_config_entry"][::std::mem::size_of::<wbcffi_config_entry>() - 16usize];
    ["Alignment of wbcffi_config_entry"][::std::mem::align_of::<wbcffi_config_entry>() - 8usize];
    ["Offset of field: wbcffi_config_entry::key"]
        [::std::mem::offset_of!(wbcffi_config_entry, key) - 0usize];
    ["Offset of field: wbcffi_config_entry::value"]
        [::std::mem::offset_of!(wbcffi_config_entry, value) - 8usize];
};
unsafe extern "C" {
    #[doc = " Module init/new function, called on module instantiation\n\n MANDATORY CFFI function\n\n @param init_info          Waybar module information\n @param config_entries     Flat representation of the module JSON config. The data only available\n                           during wbcffi_init call.\n @param config_entries_len Number of entries in `config_entries`\n\n @return A untyped pointer to module data, NULL if the module failed to load."]
    pub fn wbcffi_init(
        init_info: *const wbcffi_init_info,
        config_entries: *const wbcffi_config_entry,
        config_entries_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Module deinit/delete function, called when Waybar is closed or when the module is removed\n\n MANDATORY CFFI function\n\n @param instance Module instance data (as returned by `wbcffi_init`)"]
    pub fn wbcffi_deinit(instance: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[doc = " Called from the GTK main event loop, to update the UI\n\n Optional CFFI function\n\n @param instance Module instance data (as returned by `wbcffi_init`)\n @param action_name Action name"]
    pub fn wbcffi_update(instance: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[doc = " Called when Waybar receives a POSIX signal and forwards it to each module\n\n Optional CFFI function\n\n @param instance Module instance data (as returned by `wbcffi_init`)\n @param signal Signal ID"]
    pub fn wbcffi_refresh(instance: *mut ::std::os::raw::c_void, signal: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[doc = " Called on module action (see\n https://github.com/Alexays/Waybar/wiki/Configuration#module-actions-config)\n\n Optional CFFI function\n\n @param instance Module instance data (as returned by `wbcffi_init`)\n @param action_name Action name"]
    pub fn wbcffi_doaction(
        instance: *mut ::std::os::raw::c_void,
        action_name: *const ::std::os::raw::c_char,
    );
}
